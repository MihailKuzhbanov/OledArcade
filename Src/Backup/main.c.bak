/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"
#include "fonts.h"
#include "ssd1306.h"

void SystemClock_Config(void);

int main(void)
{
int renderTime = 5;
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
	
	uint8_t res = SSD1306_Init();
	srand(0);
	
//print animation
SSD1306_Fill(SSD1306_COLOR_BLACK);
SSD1306_UpdateScreen();
HAL_Delay(renderTime);
for (int i = 0; i < 35; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_WHITE);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}
for (int i = 0; i < 30; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_BLACK);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}
for (int i = 0; i < 25; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_WHITE);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}
for (int i = 0; i < 20; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_BLACK);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}
for (int i = 0; i < 15; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_WHITE);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}
for (int i = 0; i < 25; i++)
{
		SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_BLACK);
	SSD1306_UpdateScreen();
HAL_Delay(renderTime);
}

SSD1306_GotoXY ( 28,4);
SSD1306_Puts("Start", &Font_11x18,SSD1306_COLOR_WHITE);
SSD1306_GotoXY ( 56,24);
SSD1306_Puts("Quit", &Font_11x18,SSD1306_COLOR_WHITE);
SSD1306_GotoXY ( 20,48);
SSD1306_Puts("2 Sides Games", &Font_7x10, SSD1306_COLOR_WHITE);
SSD1306_UpdateScreen();
HAL_Delay(2000);
SSD1306_DrawLine(28,20, 82,20, SSD1306_COLOR_WHITE);
SSD1306_UpdateScreen();
HAL_Delay(2000);


SSD1306_Fill(SSD1306_COLOR_BLACK);
SSD1306_UpdateScreen();
HAL_Delay(1000);
SSD1306_GotoXY ( 36,16);
SSD1306_Puts("LOADING", &Font_7x10,SSD1306_COLOR_WHITE);
SSD1306_UpdateScreen();
HAL_Delay(4000);

int ship[8][8] = {{0,0,0,0,0,1,1,0},{0,0,0,1,1,1,1,0},{0,0,0,1,0,1,0,1}, {0,0,0,0,1,1,0,1},{0,0,0,0,0,1,0,1}, {0,0,0,0,0,1,0,1}, {0,0,0,0,0,1,0,1},{0,0,0,0,0,0,1,1}};

	int way[64] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,1,2,1,2,1,1,1,1,1,1,1,0,0,-1,-1,-1,-1,-1,-1,-1,-2,-1,-2,-1,-2,-1,-2,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
	int place = 0;
int starsX[30];
int starsY[30];
int speed = 1;
int x = 12;
int y = 16;
	char dir = 'd';
		int rocksX[3];
		int rocksY[3];
for (int i=0; i < 30; i++)
	{
		starsX[i] = rand()%128;
	}
for (int i=0; i < 30; i++)
	{
		starsY[i] = rand()%64;
	}
	for (int i=0; i < 3; i++)
	{
		rocksX[i] = rand()%120;
	}
for (int i=0; i < 3; i++)
	{
		rocksY[i] = rand()%60;
	}

while(1)
{
SSD1306_Fill(SSD1306_COLOR_BLACK);

HAL_Delay(renderTime);

	for (int i=0; i< 30; i++)
	{
		if (starsX[i] > 0) SSD1306_DrawFilledCircle(starsX[i], starsY[i], 1, SSD1306_COLOR_WHITE);
		else
		{
			starsX[i] = 128;
			starsY[i] = rand()%64;
		}
		
	}
	for (int i=0;i < 30; i++)
	{
		starsX[i] -= speed;
	}
	for (int i=0; i< 3; i++)
	{
		if (rocksX[i] > 4) SSD1306_DrawFilledCircle(rocksX[i], rocksY[i], 3, SSD1306_COLOR_WHITE);
		else
		{
			rocksX[i] = 124;
			rocksY[i] = rand()%60;
		}
		
	}
		for (int i=0;i < 3; i++)
	{
		rocksX[i] -= speed;
		if (rocksX[i] < x)
		{
			if ((rocksY[i] == y) || (rocksY[i] == y+2) || (rocksY[i] == y-2))
			{
			for (int i = 0; i < 5; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i*2, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
			HAL_Delay(renderTime);
			}
			for (int i = 0; i < 5; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i*2, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			HAL_Delay(renderTime);
			}
			for (int i = 0; i < 3; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i*2, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
			HAL_Delay(renderTime);
			}
			for (int i = 0; i < 3; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i*2, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			HAL_Delay(renderTime);
			}
						for (int i = 0; i < 3; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i, SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
			HAL_Delay(2*renderTime);
			}
						for (int i = 0; i < 3; i++)
			{
			SSD1306_DrawFilledCircle(x, y, i, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			HAL_Delay(2*renderTime);
			}
			
						HAL_Delay(2000);
			
			for (int i = 0; i < 35; i++)
			{
			SSD1306_DrawFilledCircle(64, 32, i*2, SSD1306_COLOR_BLACK);
			SSD1306_UpdateScreen();
			HAL_Delay(renderTime);
			}
		HAL_Delay(1000);
			SSD1306_GotoXY ( 32,32);
		SSD1306_Puts("GAME OVER", &Font_7x10,SSD1306_COLOR_WHITE);
			SSD1306_UpdateScreen();
			HAL_Delay(2000);
			for (int i = 0 ; i< 20; i++)
			{
			SSD1306_DrawLine(1,31+i,127,31+i,SSD1306_COLOR_BLACK);
				SSD1306_UpdateScreen();
			HAL_Delay(2*renderTime);
							SSD1306_DrawLine(1,34+i,127,34+i,SSD1306_COLOR_BLACK);
				SSD1306_UpdateScreen();
			HAL_Delay(2*renderTime);
							SSD1306_DrawLine(1,39+i,127,39+i,SSD1306_COLOR_BLACK);
				SSD1306_UpdateScreen();
			HAL_Delay(2*renderTime);
			}
			HAL_Delay(1000);
			NVIC_SystemReset();
	}}
}
	
	
	for (int i=0;i< 8; i++)
	{
		for(int j = 0; j < 8; j++)
		{
			if (ship[i][j] == 1) SSD1306_DrawPixel(i+x,j+y,SSD1306_COLOR_WHITE);
		}
	}
	
	if (place < 64) place++;
	else place = 0;
	y+=way[place];

	SSD1306_UpdateScreen();
}
}

void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
